{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/anmol/ardefine-fe/components/FormTextInput/FormTextInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { createStyles, makeStyles, TextField } from \"@material-ui/core\";\nimport { useField, useFormikContext } from \"formik\";\n\nconst FormTextInput = (_ref) => {\n  let {\n    name,\n    placeholder\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"name\", \"placeholder\"]);\n\n  const useStyles = makeStyles(theme => createStyles({\n    root: {\n      minWidth: \"100%\",\n      minHeight: \"55px\",\n      color: \"#000000\",\n      \"& .MuiInputBase-root\": {\n        fontSize: \"14px\",\n        borderRadius: \"8px\",\n        color: \"#000000\"\n      },\n      \"& .MuiOutlinedInput-notchedOutline\": {\n        border: `0px !important`,\n        outline: \"0 !important\"\n      }\n    },\n    emptyItem: {\n      display: \"none\"\n    }\n  }));\n  const classes = useStyles();\n  const {\n    setFieldValue\n  } = useFormikContext();\n  const [field, meta] = useField(name);\n\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setFieldValue(name, value);\n  };\n\n  const configSelect = _objectSpread(_objectSpread({}, otherProps), {}, {\n    variant: \"standard\",\n    fullWidth: true,\n    onChange: handleChange\n  });\n\n  if (meta && meta.touched && meta.error) {\n    configSelect.error = true;\n    configSelect.helperText = meta.error;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread(_objectSpread({}, field), configSelect), {}, {\n      className: classes.root\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default FormTextInput;","map":{"version":3,"sources":["/home/anmol/ardefine-fe/components/FormTextInput/FormTextInput.js"],"names":["React","createStyles","makeStyles","TextField","useField","useFormikContext","FormTextInput","name","placeholder","otherProps","useStyles","theme","root","minWidth","minHeight","color","fontSize","borderRadius","border","outline","emptyItem","display","classes","setFieldValue","field","meta","handleChange","e","value","target","configSelect","variant","fullWidth","onChange","touched","error","helperText"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,SAAnC,QAAoD,mBAApD;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,QAA3C;;AAEA,MAAMC,aAAa,GAAG,UAA0C;AAAA,MAAzC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAyC;AAAA,MAAjBC,UAAiB;;AAC9D,QAAMC,SAAS,GAAGR,UAAU,CAAES,KAAD,IAC3BV,YAAY,CAAC;AACXW,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,MADN;AAEJC,MAAAA,SAAS,EAAE,MAFP;AAGJC,MAAAA,KAAK,EAAE,SAHH;AAIJ,8BAAwB;AACtBC,QAAAA,QAAQ,EAAE,MADY;AAEtBC,QAAAA,YAAY,EAAE,KAFQ;AAGtBF,QAAAA,KAAK,EAAE;AAHe,OAJpB;AASJ,4CAAsC;AACpCG,QAAAA,MAAM,EAAG,gBAD2B;AAEpCC,QAAAA,OAAO,EAAE;AAF2B;AATlC,KADK;AAeXC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE;AADA;AAfA,GAAD,CADc,CAA5B;AAsBA,QAAMC,OAAO,GAAGZ,SAAS,EAAzB;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAoBlB,gBAAgB,EAA1C;AACA,QAAM,CAACmB,KAAD,EAAQC,IAAR,IAAgBrB,QAAQ,CAACG,IAAD,CAA9B;;AAEA,QAAMmB,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AACAN,IAAAA,aAAa,CAAChB,IAAD,EAAOqB,KAAP,CAAb;AACD,GAHD;;AAKA,QAAME,YAAY,mCACbrB,UADa;AAEhBsB,IAAAA,OAAO,EAAE,UAFO;AAGhBC,IAAAA,SAAS,EAAE,IAHK;AAIhBC,IAAAA,QAAQ,EAAEP;AAJM,IAAlB;;AAOA,MAAID,IAAI,IAAIA,IAAI,CAACS,OAAb,IAAwBT,IAAI,CAACU,KAAjC,EAAwC;AACtCL,IAAAA,YAAY,CAACK,KAAb,GAAqB,IAArB;AACAL,IAAAA,YAAY,CAACM,UAAb,GAA0BX,IAAI,CAACU,KAA/B;AACD;;AAED,sBACE;AAAA,2BACE,QAAC,SAAD,gDACMX,KADN,GAEMM,YAFN;AAGE,MAAA,SAAS,EAAER,OAAO,CAACV;AAHrB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AASD,CArDD;;AAuDA,eAAeN,aAAf","sourcesContent":["import React from \"react\";\nimport { createStyles, makeStyles, TextField } from \"@material-ui/core\";\nimport { useField, useFormikContext } from \"formik\";\n\nconst FormTextInput = ({ name, placeholder, ...otherProps }) => {\n  const useStyles = makeStyles((theme) =>\n    createStyles({\n      root: {\n        minWidth: \"100%\",\n        minHeight: \"55px\",\n        color: \"#000000\",\n        \"& .MuiInputBase-root\": {\n          fontSize: \"14px\",\n          borderRadius: \"8px\",\n          color: \"#000000\",\n        },\n        \"& .MuiOutlinedInput-notchedOutline\": {\n          border: `0px !important`,\n          outline: \"0 !important\",\n        },\n      },\n      emptyItem: {\n        display: \"none\",\n      },\n    })\n  );\n\n  const classes = useStyles();\n  const { setFieldValue } = useFormikContext();\n  const [field, meta] = useField(name);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setFieldValue(name, value);\n  };\n\n  const configSelect = {\n    ...otherProps,\n    variant: \"standard\",\n    fullWidth: true,\n    onChange: handleChange,\n  };\n\n  if (meta && meta.touched && meta.error) {\n    configSelect.error = true;\n    configSelect.helperText = meta.error;\n  }\n\n  return (\n    <>\n      <TextField\n        {...field}\n        {...configSelect}\n        className={classes.root}\n      />\n    </>\n  );\n};\n\nexport default FormTextInput;"]},"metadata":{},"sourceType":"module"}